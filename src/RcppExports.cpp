// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// equal
std::vector<bool> equal(std::vector<int> x);
RcppExport SEXP _FuseSOM_equal(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(equal(x));
    return rcpp_result_gen;
END_RCPP
}
// rootChoose
double rootChoose(int n, int k, double root);
RcppExport SEXP _FuseSOM_rootChoose(SEXP nSEXP, SEXP kSEXP, SEXP rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type root(rootSEXP);
    rcpp_result_gen = Rcpp::wrap(rootChoose(n, k, root));
    return rcpp_result_gen;
END_RCPP
}
// rootChooseLookup
double rootChooseLookup(int n, int k, std::vector<double> lookup);
RcppExport SEXP _FuseSOM_rootChooseLookup(SEXP nSEXP, SEXP kSEXP, SEXP lookupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lookup(lookupSEXP);
    rcpp_result_gen = Rcpp::wrap(rootChooseLookup(n, k, lookup));
    return rcpp_result_gen;
END_RCPP
}
// rootCombLookup
double rootCombLookup(std::vector<double> ns, std::vector<double> lookup);
RcppExport SEXP _FuseSOM_rootCombLookup(SEXP nsSEXP, SEXP lookupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lookup(lookupSEXP);
    rcpp_result_gen = Rcpp::wrap(rootCombLookup(ns, lookup));
    return rcpp_result_gen;
END_RCPP
}
// stabExp
double stabExp(std::vector<double> ns, std::vector<double> lookup);
RcppExport SEXP _FuseSOM_stabExp(SEXP nsSEXP, SEXP lookupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lookup(lookupSEXP);
    rcpp_result_gen = Rcpp::wrap(stabExp(ns, lookup));
    return rcpp_result_gen;
END_RCPP
}
// lookup
std::vector<double> lookup(int n, double root);
RcppExport SEXP _FuseSOM_lookup(SEXP nSEXP, SEXP rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type root(rootSEXP);
    rcpp_result_gen = Rcpp::wrap(lookup(n, root));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FuseSOM_equal", (DL_FUNC) &_FuseSOM_equal, 1},
    {"_FuseSOM_rootChoose", (DL_FUNC) &_FuseSOM_rootChoose, 3},
    {"_FuseSOM_rootChooseLookup", (DL_FUNC) &_FuseSOM_rootChooseLookup, 3},
    {"_FuseSOM_rootCombLookup", (DL_FUNC) &_FuseSOM_rootCombLookup, 2},
    {"_FuseSOM_stabExp", (DL_FUNC) &_FuseSOM_stabExp, 2},
    {"_FuseSOM_lookup", (DL_FUNC) &_FuseSOM_lookup, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FuseSOM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
